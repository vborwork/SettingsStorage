/*
Deployment script for SettingsStorage

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SettingsStorage"
:setvar DefaultFilePrefix "SettingsStorage"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER2016\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER2016\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[pr_CreateUserSetting]...';


GO
CREATE PROCEDURE [dbo].[pr_CreateUserSetting]
                ( @ProductID int,
                  @UserID int,
                  @UserSettingID int,
                  @UserSettingDataTypeID int,
                  @StringValue nvarchar(max))
AS

DECLARE @ReturnCode int = 2;
DECLARE @TranCount int = @@TRANCOUNT;

	BEGIN TRY
		INSERT [SettingsStorage].[dbo].[tb_UserSetting]
			([ProductID],
             [UserID],
             [UserSettingID],
             [UserSettingDataTypeID],
             [StringValue])
		VALUES
		    (@ProductID,
             @UserID,
             @UserSettingID,
             @UserSettingDataTypeID,
             @StringValue)

		SET @ReturnCode = 0;

		IF @TranCount = 0 COMMIT TRANSACTION;

	END TRY
	BEGIN CATCH
		IF XACT_STATE() <> 0 AND @TranCount = 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
	END CATCH

RETURN @ReturnCode;
GO
PRINT N'Creating [dbo].[pr_DeleteUserSetting]...';


GO
CREATE PROCEDURE [dbo].[pr_DeleteUserSetting]
                (@UserID int,
				 @UserSettingDataTypeID int)
AS

DECLARE @ReturnCode int = 2;
DECLARE @TranCount int = @@TRANCOUNT;

	BEGIN TRY
		DELETE FROM [SettingsStorage].[dbo].[tb_UserSetting]
		      WHERE [UserId] = @UserID
		        AND [UserSettingDataTypeID] = @UserSettingDataTypeID
			
		SET @ReturnCode = 0;

		IF @TranCount = 0 COMMIT TRANSACTION;

	END TRY
	BEGIN CATCH
		IF XACT_STATE() <> 0 AND @TranCount = 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
	END CATCH

RETURN @ReturnCode;
GO
PRINT N'Creating [dbo].[pr_GetUserSettings]...';


GO
CREATE PROCEDURE [dbo].[pr_GetUserSettings]
	@UserID int
AS
	SELECT [Id],
           [ProductID],
           [UserID],
           [UserSettingID],
           [UserSettingDataTypeID],
           [StringValue]
	  FROM [SettingsStorage].[dbo].[tb_UserSetting]
	 WHERE [UserID] = @UserId
RETURN 0
GO
PRINT N'Creating [dbo].[pr_UpdateUserSetting]...';


GO
CREATE PROCEDURE [dbo].[pr_UpdateUserSetting]
                (@UserID int,
				 @UserSettingDataTypeID int,
                 @StringValue nvarchar(max))
AS

DECLARE @ReturnCode int = 2;
DECLARE @TranCount int = @@TRANCOUNT;

	BEGIN TRY
		UPDATE [SettingsStorage].[dbo].[tb_UserSetting]
		   SET [StringValue] = @StringValue
		 WHERE [UserId] = @UserID
		   AND [UserSettingDataTypeID] = @UserSettingDataTypeID
			
		SET @ReturnCode = 0;

		IF @TranCount = 0 COMMIT TRANSACTION;

	END TRY
	BEGIN CATCH
		IF XACT_STATE() <> 0 AND @TranCount = 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
	END CATCH

RETURN @ReturnCode;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

USE [SettingsStorage];
GO

INSERT INTO [dbo].[tb_UserSettingDataType]
           ([Id]
           ,[Name])
     VALUES
	       (1,
            'betslider'),
           (2,
            'background')
GO

INSERT INTO [dbo].[tb_UserSetting]
           ([Id]
           ,[ProductID]
           ,[UserID]
           ,[UserSettingID]
           ,[UserSettingDataTypeID]
           ,[StringValue])
     VALUES
	       (1,
            7001,
            1,
            1,
            1,
            '{\"preFlop\":[\"2.2\",\"3\",\"5\"],\"postFlop\":[\"20\",\"30\",\"50\"]}'),
           (2,
            7001,
            1,
            1,
            2,
            '{\"preFlop\":["\#FFFFF"]}')

GO
PRINT N'Update complete.';


GO
